# Generated by Selenium IDE
import pytest
import time
from dateutil.relativedelta import relativedelta
import json
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException
#import win32com.client*
#from htmldocx import HtmlToDocx
#import pyautogui as pag
import os
from datetime import datetime
import copy
import pandas as pd
import re
import urllib.parse
# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.common.by import By
#import win32com.client
#from htmldocx import HtmlToDocx
#import pyautogui as pag
import os
from datetime import datetime
import copy
import pandas as pd
import re
from selenium.webdriver.support.ui import Select



#from pydrive.auth import GoogleAuth
#from pydrive.drive import GoogleDrive


#from googleapiclient import discovery
#from httplib2 import Http
#from oauth2client import file, client, tools
from datetime import datetime
import re
from tkinter.filedialog import askopenfilename
from tkinter import filedialog
from tkinter import *
import os
import time
import json
from datetime import datetime
import pandas as pd
import os
import glob
import shutil
from docx import Document
from docx.shared import Pt
#from import tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename

# =============================================================================
# Functions
# =============================================================================
def set_value_from_location_string(document,table,row,column,value):
    

    # element=document._element
    document_element = document.tables[table].cell(row, column)
    document_element.text = value
    document_element.paragraphs[0].runs[0].font.name = 'Arial'
    document_element.paragraphs[0].runs[0].font.size = Pt(11)
    return True
def process_url(url):
  filename=url.split('/')[-1].replace("%20"," ")
  return   filename

def get_value_from_location_string(document,table,row,column):
    # element=document._element
    document_element = document.tables[table].cell(row, column)
    value = document_element.text

    return value

def get_trc_from_fields_dict(fileds_dictionary,field_name):
    t=fileds_dictionary.get(field_name).get('table')
    r=fileds_dictionary.get(field_name).get('row')
    c=fileds_dictionary.get(field_name).get('column')
    return t,r,c
    
def get_value_from_fields_dict(document,fileds_dictionary,field_name):
    t=fileds_dictionary.get(field_name).get('table')
    r=fileds_dictionary.get(field_name).get('row')
    c=fileds_dictionary.get(field_name).get('column')
    value=get_value_from_location_string(document,t,r,c)
    return value

def set_value_from_fields_dict(document,fields_dictionary,field_name,value):
    t=fields_dictionary.get(field_name).get('table')
    r=fields_dictionary.get(field_name).get('row')
    c=fields_dictionary.get(field_name).get('column')
    set_value_from_location_string(document,t,r,c,value)    
    
    return True
    
def write_debug_string(document,t_max,r_max,c_max):
    for t in range(t_max):
        for r in range (r_max):
            for c in range (c_max):
                
                try:
                    extisting_text=get_value_from_location_string(document,t,r,c)
                    setstring=f"{extisting_text} t{t}r{r}c{c}"
                    set_value_from_location_string(document,t,r,c,setstring)
                except:
                    print(f"No t{t}r{r}c{c}")

def select_learner(learner_list_dict):
    # Create a list of rows numbered from 0 to the length of the dictionary
    rows = list(range(len(learner_list_dict)))

    # Print the list of rows to let the user choose
    for i, row in enumerate(rows):
        print(f"Row {i}: {list(learner_list_dict.keys())[row]}")

    # Wait for user input to choose a row by number
    try:
        selected_row = int(input("Enter the row number: "))

        # Check if the selected row is valid
        if 0 <= selected_row < len(rows):
            selected_name = list(learner_list_dict.keys())[selected_row]
            selected_url = learner_list_dict[selected_name]
            print(f"Selected Name: {selected_name}, URL: {selected_url}")
        else:
            print("Invalid row number. Please enter a valid row number.")
    except ValueError:
        print("Invalid input. Please enter a valid row number.")
    return selected_name,selected_url

# =============================================================================
# Selenium classes
# =============================================================================

class vle_access():
  def setup_method(self,portfolio_folder,progress_tracking_folder):
    # The portoflio is comprised wbe pages so these are printed to PDF therefore savefile.default_directory= portfolio_folder - used for this
    # The pogress tackers are files that can be downloaded so  download.default_directory= progress_tracking_folder 
    
    chrome_options = webdriver.ChromeOptions()
    settings = {
       "recentDestinations": [{
            "id": "Save as PDF",
            "origin": "local",
            "account": "",
        }],
        "selectedDestinationId": "Save as PDF",
        "version": 2,
        "isHeaderFooterEnabled": False,
        "isCssBackgroundEnabled": True
    }
    prefs = {'printing.print_preview_sticky_settings.appState': json.dumps(settings), 
             "download.default_directory" : progress_tracking_folder,
             'savefile.default_directory' : portfolio_folder}
    chrome_options.add_experimental_option('prefs', prefs)
    chrome_options.add_argument('--kiosk-printing')
    chrome_options.add_argument('--enable-print-browser')

    self.driver = webdriver.Chrome(options=chrome_options)
    #self.driver = webdriver.Chrome()
    
    #self.options.add_argument('--kiosk-printing')
    self.vars = {}

  def get_chrome_download_folder(self):
      download_directory = self.driver.execute_script("return chrome.downloads.getPreferences();")
      return download_directory
    
  def teardown_method(self, method):
    self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars["window_handles"]
    if len(wh_now) > len(wh_th8en):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def get_gmertix_report(self,learner):
    self.driver.get("https://manage.gmetrix.net/Access/Login.aspx?ReturnUrl=%2F")
    
    self.driver.set_window_size(1124, 709)
    self.driver.find_element(By.ID, "cphMain_txtUser").send_keys("andy.brown@tdm.co.uk")
    self.driver.find_element(By.ID, "cphMain_txtKey").send_keys("Ly8iWRX99wdFpqc")
    
    self.driver.find_element(By.ID, "LoginButton").click()
    
    
    ### URL To reques report of learner GMertix %complete
    learner_url_format=learner_name.replace(" ","+")
    print(f"Learner Name {learner_url_format}")
    
    # American date m%2d%YYYY
    month_from="01"
    day_from="01"
    year_from="2020"
    month_to="01"
    day_to="01"
    year_to="2025"
    
    date_from_url_format=f"{month_from}%2f{day_from}%2f{year_from}"
    date_to_url_format=f"{month_to}%2f{day_to}%2f{year_to}"
    
    #https://manage.gmetrix.net/Admin/Reports/ReportGenerateResult.aspx?ID=6&SID=NTi5pEcIOjw%3d&SNAME=dFnkS0tHqXcIa0twDBqvm0ut2t1jHb6KXwPe%2b6DJFoE%3d&RS=iJxIyQfLjAw%3d&sd=9%2f6%2f2022&ed=2%2f16%2f2023&cat=0&ac=&sn=Adam+Dolphin&cn=&pu=1&sc=&sgi=-1&sgin=Select
    url=f"https://manage.gmetrix.net/Admin/Reports/ReportGenerateResult.aspx?ID=6&SID=NTi5pEcIOjw%3d&SNAME=dFnkS0tHqXcIa0twDBqvm0ut2t1jHb6KXwPe%2b6DJFoE%3d&RS=iJxIyQfLjAw%3d&sd={date_from_url_format}&ed={date_to_url_format}&cat=0&ac=&sn={learner_url_format}&cn=&pu=1&sc=&sgi=-1&sgin=Select"
    self.driver.get(url)

    #Press Download Excel
    self.driver.find_element(By.CSS_SELECTOR, ".rgExpXLSIcon").click()
  
  def login(self):
    self.driver.get("https://vle.tdm.co.uk/login/index.php")
    self.driver.set_window_size(1124, 709)
    #self.driver.find_element(By.LINK_TEXT, "Network Account (Staff Only)").click()
    #self.driver.set_window_size(1124, 709)
    #self.driver.find_element(By.ID, "idSIButton9").click()
    #input("logged in [CR]")
    
    self.driver.find_element(By.LINK_TEXT, "Network Account (Staff Only)").click()
    time.sleep(1)
    self.driver.find_element(By.ID, "i0116").click()
    time.sleep(1)
    self.driver.find_element(By.ID, "i0116").send_keys("andy.brown@365.tdm.co.uk")
    #time.sleep(2)
    self.driver.find_element(By.ID, "idSIButton9").click()
    time.sleep(1)
    element = self.driver.find_element(By.ID, "idSIButton9")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.ID, "i0118").click()
    self.driver.find_element(By.ID, "i0118").send_keys("NO2n79o2!")
    self.driver.find_element(By.ID, "idSIButton9").click()
    self.driver.find_element(By.ID, "idSIButton9").click()

  def get_coaching_cal(self):
      url=f"https://vle.tdm.co.uk/mod/facetoface/view.php?f=560"
      print(f"url={url}")
      self.driver.get(url)
      # Find the input element by its attribute values (type and value)
      export_button = self.driver.find_element(By.CSS_SELECTOR,'input[type="submit"][value="Export to file"]')

      # Click the input button

      export_button.click()
  
  def get_records(self,learner_dict):
    #Create list of all records for all learners and a list of the last SKC record for each learner
    all_records_list=[]
    all_sck_records_list=[]
    
    name_url_list = [(name, url) for name, url in learner_dict.items()]
    # Print the list of name-url tuples
    records_dict={}
    skc_records_dict={}

    for name, url in name_url_list:
        skc_records_dict['name']=name
        records_dict['name']=name
        print(f"Name: {name}, URL: {url}")
        id=url.split('=')[-1]
        skc_records_dict['id']=id
        records_dict['id']=id
        url = f"https://vle.tdm.co.uk/totara/evidence/index.php?user_id={id}"
        print("URL: ", url)
        self.driver.get(url)
        # Find the table element by its ID or any other suitable method
        #table = self.driver.find_element(By.XPATH,"//table[@class='totaratable flexible logtable generalbox reportbuilder-table']")
        # Find the table element by its ID
    
        try:
            table = self.driver.find_element(By.ID,"evidence_bank_other")
        except NoSuchElementException:
            print("No records found for create dummy data{url}")
            skc_records_dict['creation_date']="01 Dec 1970 00:00"
            skc_records_dict['url']="none"
            skc_records_dict['type_name']="none"
            skc_records_dict['name']=name
            all_sck_records_list.append(copy.deepcopy(skc_records_dict))
            records_dict['creation_date']="01 Dec 1970 00:00"
            records_dict['type_name']="none"
            records_dict['name']=name
            records_dict['url']="none"
            all_records_list.append(copy.deepcopy(records_dict))
            #go to next itteration - exit this for loop itteration 
            break
        
        # Create empty lists to store data
        creation_dates = []
        types = []

        # Iterate through the rows of the table and extract data
        rows = table.find_elements(By.XPATH,".//tbody/tr")
        for row in rows:
            creation_date = row.find_element(By.XPATH,".//td[@class='cell c2 base_created_at']").text
            type_name = row.find_element(By.XPATH,".//td[@class='cell c1 type_name']").text

            creation_dates.append(creation_date)
            types.append(type_name)
            print(f"Creation Date: {creation_date}, Type: {type_name}")
            if (type_name == "SKC Coaching Record"):
                skc_records_dict['creation_date']=creation_date.replace(" at ", " ")
                skc_records_dict['url']=url
                skc_records_dict['type_name']=type_name
                all_sck_records_list.append(copy.deepcopy(skc_records_dict))
            records_dict['creation_date']=creation_date.replace(" at ", " ")
            records_dict['type_name']=type_name
            records_dict['url']=url
            all_records_list.append(copy.deepcopy(records_dict))
    return all_records_list,all_sck_records_list



  def get_last_skc_record(self,id):
      url=f"https://vle.tdm.co.uk/totara/EVIDENCE/index.php?user_id={id}"
      print(f"url={url}")
      self.driver.get(url)

      # Select SKC Records only
      self.driver.find_element(By.ID, "id_type-name").click()
      self.driver.find_element(By.ID, "id_type-name").send_keys("SKC")
      self.driver.find_element(By.ID, "id_type-name").send_keys(Keys.ENTER)

      #all_a_elements = self.driver.find_elements(By.TAG_NAME, 'a')
      #table_body = self.driver.find_element(By.ID, "yui_3_17_2_1_1699894546085_321")
      #all_a_elements = self.driver.find_elements(By.XPATH, '//tr/td[@class="cell c0 base_name"]/a')
      
      # Extract all activity records for this person the text and href attributes of each <a> element
      """       evdience_list = {}
        for a in all_a_elements:
            text = a.text
            href = a.get_attribute('href')
            print(f"Evdience Text: {text}, EvidenceHref: {href}")
            evdience_list[text] = href
        last_row_key, last_row_value = list(evdience_list.items())[-1]
      """
      #Select the last url to download the record
      #self.driver.get(last_row_value)


    #
    #
      #Extract all file url's
      # Find all <a> elements with the class "icon"
      #file_links = self.driver.find_elements(By.CLASS_NAME, "icon")
      #file_links = self.driver.find_elements(By.XPATH, "//a[contains(span[@class='sr-only'], 'File')]")
      #file_links = self.driver.find_elements(By.XPATH, '//td[@class="cell c0 base_name"]/a')


      evidence_list={}
      # XPath to find rows that contain "SKC Coaching Record"
      rows_xpath = "//tr[.//td[@class='cell c1 type_name' and contains(., 'SKC Coaching Record')]]"
      # Find those rows
      rows = self.driver.find_elements(By.XPATH, rows_xpath)

      for row in rows:
        element = row.find_element(By.XPATH, ".//td[@class='cell c0 base_name']/a")
        url = element.get_attribute('href')
        text = element.text
        print(f"URL: {url}, Text: {text}")
        evidence_list[text] = url
      
      # For each of 'SKC Coaching Record' URL extract the evidence URLs
      last_skc_docs=[]
      for url in evidence_list.values():
            print(url)
            self.driver.get(url)
            uploads_xpath = "//div[@class='tw-evidence__fields_view_row tf_element totara_form_element_text']//a"
            upload_rows = self.driver.find_elements(By.XPATH, uploads_xpath)

            doclist=[]
            for upload in upload_rows:
                text=upload.text
                #text_file_removed=text.split('\n')[1]
                url=upload.get_attribute('href')
                print(f"<text={text}>")
                print(f"<url={url}") 
                doclist.append(url)

                #Check if it contains .docx and SKC - a coaching record
                pattern = r".*SKC.*\.(?i:docx)$"
                if re.search(pattern, text):
                    last_skc_docs.append(doclist)
                    print(f"Adding DOC Template {last_skc_docs}")
      #Check if there are any entries in the list and download the last one to chromes directory 
      if len(last_skc_docs) == 0:
        print("Empyth list download default template")
      else:
        
        last_url_list=last_skc_docs[-1]
        #Download all documents associated this SKC coaching record
        for url in last_url_list:
            print(f"Downloading {url}")
            self.driver.get(url)
        



      return last_url_list,evidence_list
        
      
      
      
      

  def get_learner_data(self,learner):
    print("Get learners data")
    self.driver.get("https://vle.tdm.co.uk/totara/reportbuilder/report.php?id=237")


    
    #time.sleep(2)
    self.driver.find_element(By.ID, "id_user-fullname").click()
    #time.sleep(2)
    self.driver.find_element(By.ID, "id_user-fullname").send_keys(learner)
    self.driver.find_element(By.ID, "id_user-fullname").send_keys(Keys.ENTER)
    #self.driver.find_element(By.ID, "id_user-fullname").send_keys("Eliz")
    

    #Set Status in Learning to any - just incase they have gone past their period of leanring
    self.driver.find_element(By.ID, "id_user-custom_field_66").click()
    dropdown = self.driver.find_element(By.ID, "id_user-custom_field_66")
    select = Select(dropdown)
    select.select_by_visible_text("any value")

    #dropdown.find_element(By.XPATH, "//option[. = 'any value']").click()
    #self.driver.find_element(By.ID, "id_user-custom_field_66").send_keys(Keys.ENTER)
    self.driver.find_element(By.ID, "id_submitgroupstandard_addfilter").click()

    

    #self.driver.find_element(By.ID, "rb_237_r1_c0").click()
    self.driver.find_element(By.LINK_TEXT, learner).click()

    learner_html = self.driver.page_source
    
    key_value_pairs = []


    attribute_values_dict={}

    attributes_list=['Email address','Current Learning Start Date','Practical Period Start Date (FDiL)','End of Practical Period','Planned End Date','EPA Ready','RBSG Rating','RBSG Notes','ULN Number','Employer Mentor','Mentor email address','Employer Company Name']
    for attribute in attributes_list:
        search_xpath=f"//dt[contains(text(), \'{attribute}\')]/following-sibling::dd"
        #print(search_xpath)
        value_returned=""
        try:
            value_returned = self.driver.find_element(By.XPATH, search_xpath).text
            print(f"value returned {value_returned}")
        except:
            print("No value returned for {attribute}")

        
        key_value_pair={attribute:value_returned}
        #print(f"key_value_pair {key_value_pair}")
        #attribute_values.append(key_value_pair)
        
        attribute_values_dict[attribute]=value_returned
        #print(attribute_values)
        #print()
    
    #Extract the PDC information
    search_xpath=f"//li//a[@class=\'editjoblink\' and contains(text(), \'PDC\')]"
    pdc_element = self.driver.find_element(By.XPATH, search_xpath)
    pdc_text=pdc_element.text
    pdc_url=pdc_element.get_attribute("href")
    print(f"pdc_text={pdc_text}")
    print(f"PDC URL={pdc_url}")
    
    self.driver.get(pdc_url)
    search_xpath=f"//span[@id=\'managertitle\']"
    pdc_name_element = self.driver.find_element(By.XPATH, search_xpath)
    pdc_name_and_email=pdc_name_element.text
    # Extract just the name "Alex Royle (Alex.Royle@365.tdm.co.uk)"
    word_list=pdc_name_and_email.split()[0:2]
    pcd_name=' '.join(word_list)
    print(f"pdc name={pcd_name}")
    attribute_values_dict['PDC Name']=pcd_name
    


    return attribute_values_dict

  def get_learner_list(self):
    print("Get learners list")
    self.driver.get("https://vle.tdm.co.uk/cohort/members.php?id=268")
    # Parse the HTML using BeautifulSoup
    page_source = self.driver.page_source
    #print(page_source)

    #Save output for debug
    output_file_name = r'C:\\Users\\AndyBrown\\Downloads\\page_source.txt'

    # Write the page source to a text file
    with open(output_file_name, 'w', encoding='utf-8') as output_file:
        output_file.write(page_source)


    #all_a_elements = self.driver.find_elements(By.TAG_NAME, 'a')
    all_a_elements = self.driver.find_elements(By.XPATH, '//tr[contains(@class, "")]/td[@class="cell c0 user_namelink"]/a')
    # Extract the text and href attributes of each <a> element
    learner_list_dict = {}
    for a in all_a_elements:
        text = a.text
        href = a.get_attribute('href')
        print(f"Text: {text}, Href: {href}")
        learner_list_dict[text] = href
    
    #page_source=self.driver.get("https://vle.tdm.co.uk/cohort/members.php?id=268")
    soup = BeautifulSoup(page_source, 'html.parser')

    # Find all the <a> elements with class 'user_namelink'
    user_namelinks = soup.find_all('a', class_='user_namelink')
    print(user_namelinks)
    #print(soup)
    # Extract the usernames and URLs
    usernames_and_urls = [(link.text, link['href']) for link in user_namelinks]

    # Print the extracted data
    for username, url in usernames_and_urls:
        print(f"Username: {username}")
        print(f"URL: {url}")
        print("\n")

    return learner_list_dict

    
    
    
  def get_learner_portfolio(self,learner):
      # Fudge to make sure https://ep.tdm.co.uk/ is opened in the smae tab
      self.driver.get('https://vle.tdm.co.uk/mod/lti/launch.php?id=21337')
      ep_html = self.driver.page_source
      
      pages_in_portfolio=[]
      elems=self.driver.find_elements(By.XPATH,"//h3/a[@href]")
      for elem in elems:
          this_url=elem.get_attribute("href")
          pages_in_portfolio.append(this_url)
          print(this_url)
          
      
      
      #elems = self.driver.find_elements_by_xpath("//a[@href]")
      for page_url in pages_in_portfolio:
          #print(page)
          # Export the first page to docx
          #page_url=elem.get_attribute("href")
          print(f"page_url={page_url}")
          self.driver.get(page_url)
          self.driver.execute_script('window.print();')
          time.sleep(2)

  def login_vle(self):
    print("Running Test")
    self.driver.get("https://vle.tdm.co.uk/totara/reportbuilder/report.php?id=237")
    self.driver.set_window_size(1124, 709)
    #self.driver.find_element(By.LINK_TEXT, "Network Account (Staff Only)").click()
    #self.driver.set_window_size(1124, 709)
    #self.driver.find_element(By.ID, "idSIButton9").click()
    #input("logged in [CR]")
    
    self.driver.find_element(By.LINK_TEXT, "Network Account (Staff Only)").click()
    time.sleep(1)
    self.driver.find_element(By.ID, "i0116").click()
    time.sleep(1)
    self.driver.find_element(By.ID, "i0116").send_keys("andy.brown@365.tdm.co.uk")
    #time.sleep(2)
    self.driver.find_element(By.ID, "idSIButton9").click()
    time.sleep(1)
    element = self.driver.find_element(By.ID, "idSIButton9")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.ID, "i0118").click()
    self.driver.find_element(By.ID, "i0118").send_keys("NO2n79o2!")
    self.driver.find_element(By.ID, "idSIButton9").click()
    self.driver.find_element(By.ID, "idSIButton9").click()


  def logout(self):
      
      self.driver.get("https://vle.tdm.co.uk/login/logout.php")
      self.driver.find_element_by_xpath("//input[@type='submit']").click()
#      self.driver.find_element(By.ID, "actionmenuaction-11").click()
      
  
  def get_learner_progress_tracker(self,learner):
    print("Running Test")
    self.driver.get("https://vle.tdm.co.uk/totara/reportbuilder/report.php?id=237")
    self.driver.set_window_size(1124, 709)
    #self.driver.find_element(By.LINK_TEXT, "Network Account (Staff Only)").click()
    #self.driver.set_window_size(1124, 709)
    #self.driver.find_element(By.ID, "idSIButton9").click()
    #input("logged in [CR]")
    
    self.driver.find_element(By.LINK_TEXT, "Network Account (Staff Only)").click()
    time.sleep(1)
    self.driver.find_element(By.ID, "i0116").click()
    time.sleep(1)
    self.driver.find_element(By.ID, "i0116").send_keys("andy.brown@365.tdm.co.uk")
    #time.sleep(2)
    self.driver.find_element(By.ID, "idSIButton9").click()
    time.sleep(1)
    element = self.driver.find_element(By.ID, "idSIButton9")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.ID, "i0118").click()
    self.driver.find_element(By.ID, "i0118").send_keys("NO2n79o2!")
    self.driver.find_element(By.ID, "idSIButton9").click()
    self.driver.find_element(By.ID, "idSIButton9").click()

    
    
    #time.sleep(2)
    self.driver.find_element(By.ID, "id_user-fullname").click()
    #time.sleep(2)
    self.driver.find_element(By.ID, "id_user-fullname").send_keys(learner)
    #self.driver.find_element(By.ID, "id_user-fullname").send_keys("Eliz")
    self.driver.find_element(By.ID, "id_user-fullname").send_keys(Keys.ENTER)
    #self.driver.find_element(By.ID, "rb_237_r1_c0").click()
    self.driver.find_element(By.LINK_TEXT, learner).click()
    
    #self.driver.find_element(By.CSS_SELECTOR, "#fgroup_id_user-fullname_grp .felement").click()
    
    
    # self.driver.find_element(By.ID, "id_user-fullname").send_keys(Keys.ENTER)
    # self.driver.find_element(By.LINK_TEXT, "Elizabeth Waterhouse").click()
    self.driver.find_element(By.LINK_TEXT, "Log in as").click()
    self.driver.find_element(By.ID, "notice").click()
    self.driver.find_element(By.CSS_SELECTOR, ".form-submit").click()
    
    # Now access the e portoflio as that person 
    #self.driver.find_element(By.CSS_SELECTOR, "#totaramenuitem20 .totaraNav_prim--list_item_label").click()
    
    # Fudge to make sure https://ep.tdm.co.uk/ is opened in the smae tab
    self.driver.get('https://vle.tdm.co.uk/totara/evidence/index.php')
    ep_html = self.driver.page_source
    # Creating an HTML file
    ep_file = open("ep_file.html","w")
    ep_file.write(ep_html)
    ep_file.close()
    
    eveidence_urls=[]
    time_stamps=[]
    data_list=[]
    
    ## Loop through multiple evenicen pages using the next button
    while True:
        elems=self.driver.find_elements(By.XPATH,"//table//*")
       
        number_of_html_elements=len(elems)
        
        for i in range(number_of_html_elements):
            html_class=elems[i].get_attribute("class")
            html_id=elems[i].get_attribute("id")
            html_text=elems[i].text
            #print(html_class)
                
               
            if re.match(r"cell c..*", html_class):                
                #print(f"Column class={html_class} value={html_text}")
                
                if "base_name" in html_class:
                    # Then this is link to evdience with URL / HREF in the next element
                    base_name=html_text
                    html_href=elems[(i+1)].get_attribute("href")
                    print(f"href={html_href}")
                if "base_created_at" in html_class:
                    base_created_at=html_text
                if "creator_name" in html_class:
                    coach_name=html_text
                if "base_actions" in html_class:
                    # Then this is the last column so get all data togther
                    data_record={'evidence_name':base_name,'url':html_href,'created':base_created_at,'coach':coach_name}
                    data_list.append(data_record)
                    
        next_element=self.driver.find_elements(By.CLASS_NAME,"next")
        
        num_of_next_elems=len(next_element)
        if num_of_next_elems == 0:
            break
        if num_of_next_elems == 1:
            next_url=next_element.get_attribute("href")
        if num_of_next_elems >1:
            next_url=next_element[0].get_attribute("href")
        print(f"Moving to next page Next url ={next_url}")
        self.driver.get(next_url)
        time.sleep(2)
    
    # Now use the list of urls to go to each page and download the documents
    file_download_list=[]
    for row in data_list:
        #data_record={'evidence_name':base_name,'url':html_href,'created':base_created_at,'coach':coach_name}
        eveidence_entry_url=row.get("url")
        evidence_name=row.get("evidence_name")
        created=row.get("created")
        coach=row.get("coach")
        self.driver.get(eveidence_entry_url)
        
        time.sleep(2)
        elements=self.driver.find_elements(By.XPATH,"//div[@class='tf_element_input']//a[@href]")       
        
        # For all links on the page check they are evidence and add to list
        for elment in elements:
            url_for_item_of_evidence=elment.get_attribute("href")
            if "evidence_filemgr" in url_for_item_of_evidence:
                file_download_dict={'fileurl':url_for_item_of_evidence,'evidence_name':evidence_name,'created':created,'coach':coach}
                file_download_list.append(file_download_dict)
                print(f"Adding file url={url_for_item_of_evidence}")

    file_rec_list=[]
    for file_url_rec in file_download_list:
        file_url=file_url_rec.get("fileurl")
        filename=file_url.split('/')[-1]
        #Spaces appear as %20 online replace them with a real " " space
        filename=filename.replace("%20"," ")
        rec_created=file_url_rec.get("created")
        rec_coach=file_url_rec.get("coach")
        print(f"Downloading={file_url}")
        self.driver.get(file_url)
        time.sleep(1)
        file_records_dict={"url":file_url,"filename":filename,"created":rec_created,"coach":rec_coach}
        file_rec_list.append(file_records_dict)
   
    all_records_df=pd.DataFrame(file_rec_list)
    all_records_df.to_excel(xls_file)
    
    
    # Logout so that the next learner can be accessed
    #self.driver.find_element(By.ID, "yui_3_17_2_1_1676638990620_42").click()
    
    #print("Pause")
    
    # ep_html = self.driver.page_source
    
    
    # #elems=
    # # Extract all the pages
    # pages_in_portfolio=[]
    # elems=self.driver.find_elements(By.XPATH,"//h3/a[@href]")
    # for elem in elems:
    #     this_url=elem.get_attribute("href")
    #     pages_in_portfolio.append(this_url)
    #     print(this_url)
        
    
    
    # #elems = self.driver.find_elements_by_xpath("//a[@href]")
    # for page_url in pages_in_portfolio:
    #     #print(page)
    #     # Export the first page to docx
    #     #page_url=elem.get_attribute("href")
    #     print(f"page_url={page_url}")
    #     self.driver.get(page_url)
    


    #     # word = win32com.client.Dispatch('Word.Application')
    #     # doc = word.Documents.Add('ep_file.html')
    #     # doc.SaveAs('example.doc', FileFormat=0)
    #     # doc.Close()
    #     # word.Quit() 
    #     time.sleep(2)
    #     #input("pause")
    #     self.driver.execute_script('window.print();')
    #     time.sleep(2)
    #     #pag.press("enter")
    #     #pag.typewrite('test.pdf')
    #     #pag.press("enter")
    # #time.sleep(20)
    
    
    #print("Pause Here")
# Saving the data into the HTML file


    # self.driver.find_element(By.CSS_SELECTOR, "#totaramenuitem46 .flex-icon").click()
    # self.driver.find_element(By.CSS_SELECTOR, "#totaramenuitem48 .navExpand--list_item_label").click()
    # self.driver.find_element(By.ID, "yui_3_17_2_1_1675264237064_320").click()
    # self.driver.find_element(By.ID, "action_link63da8110352851").click()
    # self.driver.find_element(By.ID, "action_link63da8110352852").click()
    # self.driver.find_element(By.ID, "yui_3_17_2_1_1675264310988_320").click()
    # self.driver.execute_script("window.scrollTo(0,1300)")
    # self.driver.find_element(By.ID, "yui_3_17_2_1_1675264325309_320").click()
    # self.driver.execute_script("window.scrollTo(0,1300)")
    # self.vars["window_handles"] = self.driver.window_handles
    # self.driver.find_element(By.ID, "yui_3_17_2_1_1675264333551_320").click()
    # self.vars["win5530"] = self.wait_for_window(2000)
    # self.driver.switch_to.window(self.vars["win5530"])
    

#Template
template_fields={
                    'company':{'table':0,'row':1,'column':1},
                    'employer':{'table':0,'row':2,'column':4},
                    'learner':{'table':0,'row':2,'column':0},
                    'mentor':{'table':0,'row':2,'column':7},
                    'pdc':{'table':0,'row':4,'column':2},
                    'skc':{'table':0,'row':3,'column':6},
                    'start':{'table':0,'row':6,'column':4},
                    'threshold':{'table':0,'row':7,'column':4},
                    'end':{'table':0,'row':9,'column':4},
                    'formative_feedback':{'table':1,'row':2,'column':1},
                    'formative_objectives':{'table':1,'row':4,'column':0},
                    'next_objectives':{'table':1,'row':6,'column':1},
                    'months_elapsed':{'table':0,'row':4,'column':7},
                    'date':{'table':0,'row':5,'column':2},
                    'start_date':{'table':0,'row':6,'column':4},
                    'threshold_date':{'table':0,'row':7,'column':4},
                    'gateway_date':{'table':0,'row':8,'column':4},
                    'end_date':{'table':0,'row':9,'column':4},
                    'declaration_learner_name':{'table':8,'row':1,'column':7},
                    'declaration_mentor_name':{'table':8,'row':2,'column':7},
                    'declaration_coach_name':{'table':8,'row':3,'column':7},
                    'declaration_learner_sig':{'table':8,'row':2,'column':3},
                    'declaration_mentor_sig':{'table':8,'row':3,'column':3},
                    'declaration_coach_sig':{'table':8,'row':4,'column':3},
                    'declaration_learner_date':{'table':8,'row':2,'column':5},
                    'declaration_mentor_date':{'table':8,'row':3,'column':5},
                    'declaration_coach_date':{'table':8,'row':4,'column':5},
                    'skc_notes':{'table':3,'row':0,'column':3},
                    
    
    }



# =============================================================================
# Main
# =============================================================================

# Open Chrome set the default donwload directory for Chrome and log into the vle
donwload_dir=r'C:\Users\AndyBrown\OneDrive - The Development Manager Ltd (TDM)\Obsidian_tdm\working_area\downloads'
directory_path="/home/andy/Downloads/"
a=vle_access()
a.setup_method(donwload_dir,donwload_dir)
a.login_vle()
learner_dict=a.get_learner_list()
all_records_list,all_sck_records_list=a.get_records(learner_dict)

all_skc_records_df=pd.DataFrame(all_sck_records_list)
all_skc_records_df.to_excel("all_skc_records_df.xlsx")
all_records_list_df=pd.DataFrame(all_records_list)
all_records_list_df.to_excel("all_records_list_df.xlsx")
print(all_sck_records_list)
print(all_records_list)
# Separate names and URLs into a list of tuples
#name_url_list = [(name, url) for name, url in learner_dict.items()]

# Print the list of name-url tuples
#for name, url in name_url_list:
#   print(f"Name: {name}, URL: {url}")
#print(f"Learner 0 {learner_dict.get('Text')}")
print("=======================================")
#print(learner_dict)
#learner,url=select_learner(learner_dict)
#print(f"Selected Learner {learner} {url}")
#id=url.split('=')[-1]
#print(f"ID={id}")
